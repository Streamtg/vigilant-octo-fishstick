name: Simulate Real Engagement

on: workflow_dispatch: schedule: - cron: '0 * * * *'  # Cada 1 hora

jobs: simulate-engagement: runs-on: ubuntu-latest strategy: matrix: instance: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

steps:
  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '18'

  - name: Install Puppeteer
    run: npm install puppeteer

  - name: Simulate engagement visit
    run: |
      cat > visit.js <<'EOF'
      const puppeteer = require('puppeteer');
      const fs = require('fs');

      const referers = [
        'https://facebook.com',
        'https://twitter.com',
        'https://linkedin.com',
        'https://google.com'
      ];

      const userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64)...',
        'Mozilla/5.0 (Linux; Android 9)...',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)...',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)...'
      ];

      async function extractLinks(page) {
        return await page.$$eval('a[href^="https://yoelmod.blogspot.com"]', as => as.map(a => a.href));
      }

      async function simulateVisit() {
        const browser = await puppeteer.launch({ headless: 'new', args: ['--no-sandbox'] });
        const page = await browser.newPage();

        await page.setUserAgent(userAgents[Math.floor(Math.random() * userAgents.length)]);
        await page.setViewport({ width: 375 + Math.floor(Math.random() * 800), height: 600 });
        await page.setExtraHTTPHeaders({ referer: referers[Math.floor(Math.random() * referers.length)] });

        const delay = ms => new Promise(res => setTimeout(res, ms));

        try {
          await page.goto('https://yoelmod.blogspot.com/', { waitUntil: 'domcontentloaded', timeout: 60000 });
          await delay(5000);
          const allLinks = await extractLinks(page);

          const visited = new Set();
          let clicks = 0;

          while (clicks < 8 + Math.floor(Math.random() * 4) && allLinks.length > 0) {
            const next = allLinks[Math.floor(Math.random() * allLinks.length)];
            if (visited.has(next)) continue;
            visited.add(next);

            await page.goto(next, { waitUntil: 'domcontentloaded', timeout: 60000 });
            await delay(3000 + Math.random() * 4000);
            await page.evaluate(() => window.scrollBy(0, Math.random() * 500));
            clicks++;
          }

          const social = referers[Math.floor(Math.random() * referers.length)];
          await page.goto(social, { waitUntil: 'domcontentloaded' });
          await delay(5000);

        } catch (err) {
          console.error('Error visitando:', err.message);
        } finally {
          await browser.close();
        }
      }

      (async () => {
        await simulateVisit();
      })();
      EOF

      node visit.js

