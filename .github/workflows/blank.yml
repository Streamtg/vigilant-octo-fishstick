name: Simulate Real Visitor with Proxies and Device Emulation

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  simulate-visitor:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        go: [1.0, 1.1, 1.2, 1.3, 1.4, 1.5]
        flag: [A, B, C, D, E, F, G, H, I]

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright and Chromium
        run: |
          npm init -y
          npm install playwright axios
          npx playwright install

      - name: Create simulate.js
        run: |
          cat <<'EOF' > simulate.js
          const { chromium, firefox, webkit } = require('playwright');
          const axios = require('axios');

          const urls = [
            'https://yoelmod.blogspot.com'
          ];

          const referers = [
            'https://t.co', 'https://facebook.com', 'https://twitter.com',
            'https://instagram.com', 'https://linkedin.com', 'https://reddit.com'
          ];

          const userAgents = {
            chromium: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/121.0.0.0 Safari/537.36',
            firefox: 'Mozilla/5.0 (Windows NT 10.0; rv:115.0) Gecko/20100101 Firefox/115.0',
            webkit: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_5 like Mac OS X) AppleWebKit/605.1.15 Version/13.1 Mobile/15E148 Safari/604.1'
          };

          (async () => {
            // Obtener lista de proxys (HTTP)
            let proxyList = [];
            try {
              const res = await axios.get('https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout=5000&country=all&ssl=all&anonymity=elite');
              proxyList = res.data.split('\n').filter(p => p.includes(':'));
            } catch (e) {
              console.error('No se pudo obtener la lista de proxies.');
              return;
            }

            const proxy = proxyList[Math.floor(Math.random() * proxyList.length)].trim();
            const referer = referers[Math.floor(Math.random() * referers.length)];
            const targetURL = urls[Math.floor(Math.random() * urls.length)];
            const browsers = [chromium, firefox, webkit];
            const browserName = ['chromium', 'firefox', 'webkit'][Math.floor(Math.random() * 3)];
            const browserEngine = browsers[['chromium', 'firefox', 'webkit'].indexOf(browserName)];

            const browser = await browserEngine.launch({
              headless: true,
              proxy: { server: 'http://' + proxy }
            });

            const context = await browser.newContext({
              viewport: { width: 1366, height: 768 },
              userAgent: userAgents[browserName],
              extraHTTPHeaders: {
                'referer': referer
              }
            });

            const page = await context.newPage();
            try {
              await page.goto(targetURL, { waitUntil: 'domcontentloaded', timeout: 20000 });

              for (let i = 0; i < 5; i++) {
                await page.mouse.move(Math.random() * 1300, Math.random() * 700);
                await page.mouse.wheel(0, 500);
                await page.waitForTimeout(Math.floor(Math.random() * 3000) + 1000);
              }

              const links = await page.$$eval('a', anchors =>
                anchors
                  .filter(a => a.href.includes('yoelmod.blogspot.com') && a.offsetParent !== null)
                  .map(a => a.href)
              );

              if (links.length > 0) {
                const randomLink = links[Math.floor(Math.random() * links.length)];
                await page.goto(randomLink, { waitUntil: 'domcontentloaded' });
                await page.waitForTimeout(Math.floor(Math.random() * 7000) + 3000);
              }
            } catch (e) {
              // Error silenciado para evitar que falle el workflow
            }

            await browser.close();
          })();
          EOF

      - name: Run simulate.js
        run: node simulate.js
