name: Rumble Video Traffic without Proxies - 216 Instances

on:
  workflow_dispatch:

env:
  VIDEO_URL: 'https://rumble.com/v41bpuq-school-march-festival.html'  # <-- Aquí está el enlace

jobs:
  traffic:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [1-216]
    concurrency:
      group: rumble-traffic
      cancel-in-progress: false
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install puppeteer
        run: npm install puppeteer

      - name: Create and run Puppeteer script inline
        id: run_traffic
        run: |
          echo "const puppeteer = require('puppeteer');

          const instanceNumber = '${{ matrix.instance }}';
          const url = process.env.VIDEO_URL;

          const referers = [
            'https://www.facebook.com/',
            'https://twitter.com/',
            'https://www.instagram.com/',
            'https://www.tiktok.com/'
          ];

          function wait(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          (async () => {
            const launchOptions = {
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox'],
            };

            const browser = await puppeteer.launch(launchOptions);
            const page = await browser.newPage();

            const referer = referers[Math.floor(Math.random() * referers.length)];
            await page.setExtraHTTPHeaders({
              referer: referer,
              'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
            });

            const fs = require('fs');
            const logFile = \`traffic-log-instance-\${instanceNumber}.txt\`;
            const logStream = fs.createWriteStream(logFile, { flags: 'a' });

            for(let i=1; i<=10; i++) {
              try {
                logStream.write(\`Instance \${instanceNumber} - Iteration \${i}: Navigating to page\n\`);
                await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 120000 });
                await page.waitForSelector('.bigPlayUIInner.ctp', { timeout: 60000 });
                await page.click('.bigPlayUIInner.ctp');
                logStream.write(\`Instance \${instanceNumber} - Iteration \${i}: Clicked play\n\`);
                await wait(7000);
                logStream.write(\`Instance \${instanceNumber} - Iteration \${i}: Waited 7 seconds\n\`);
              } catch (e) {
                logStream.write(\`Instance \${instanceNumber} - Iteration \${i}: Error - \${e.message}\n\`);
              }
            }

            await browser.close();
            logStream.end();
            console.log(\`Instance \${instanceNumber} finished\`);
          })();" > visit.js

          node visit.js
        env:
          VIDEO_URL: ${{ env.VIDEO_URL }}

      - name: Upload logs
        uses: actions/upload-artifact@v3
        with:
          name: traffic-logs-instance-${{ matrix.instance }}
          path: traffic-log-instance-${{ matrix.instance }}.txt
