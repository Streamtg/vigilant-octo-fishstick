name: Simulate Blog Visits

on:
  workflow_dispatch:

jobs:
  simulate-visits:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
                   45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
                   59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                   73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
                   87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
                   101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
                   112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
                   123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
                   134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                   145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
                   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
                   167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
                   178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
                   189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
                   200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
                   211, 212, 213, 214, 215, 216]

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install puppeteer axios

      - name: Simulate visit
        run: |
          cat > visit.js <<'EOF'
          const puppeteer = require('puppeteer');
          const axios = require('axios');

          const blogBase = 'https://yoelmod.blogspot.com/';
          const referers = [
            'https://google.com',
            'https://bing.com',
            'https://duckduckgo.com',
            'https://facebook.com',
            'https://twitter.com',
            'https://yoelmod.blogspot.com/'
          ];

          const userAgents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36',
            'Mozilla/5.0 (Linux; Android 12; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110 Mobile Safari/537.36',
            'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15',
            'Mozilla/5.0 (Linux; Android 9; Mi A2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100 Mobile Safari/537.36'
          ];

          async function extractLinks() {
            try {
              const response = await axios.get(blogBase);
              const html = response.data;

              const regex = /href="(https:\/\/yoelmod\.blogspot\.com\/[^\s"#]+)"/g;
              const links = new Set();
              let match;
              while ((match = regex.exec(html)) !== null) {
                if (match[1].startsWith(blogBase)) {
                  links.add(match[1]);
                }
              }
              return Array.from(links);
            } catch (error) {
              console.error('Error extrayendo enlaces:', error.message);
              return [blogBase];
            }
          }

          async function simulateVisit(url) {
            const browser = await puppeteer.launch({ headless: 'new', args: ['--no-sandbox'] });
            const page = await browser.newPage();

            // Set random user agent
            const ua = userAgents[Math.floor(Math.random() * userAgents.length)];
            await page.setUserAgent(ua);

            // Set random viewport
            await page.setViewport({
              width: 800 + Math.floor(Math.random() * 800),
              height: 600 + Math.floor(Math.random() * 600),
            });

            // Set random referer header
            const referer = referers[Math.floor(Math.random() * referers.length)];
            await page.setExtraHTTPHeaders({ referer });

            try {
              console.log(`Visitando: ${url} con User-Agent: ${ua} y Referer: ${referer}`);
              await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });

              // Espera entre 10 y 30 segundos
              const delay = ms => new Promise(r => setTimeout(r, ms));
              await delay(10000 + Math.random() * 20000);

              // Scroll progresivo
              const scrollSteps = 10 + Math.floor(Math.random() * 20);
              for (let i = 0; i < scrollSteps; i++) {
                await page.evaluate(y => window.scrollBy(0, y), 100 + Math.random() * 300);
                await delay(500 + Math.random() * 1000);
              }

              // Obtener enlaces internos para click
              const links = await page.$$eval('a[href^="' + blogBase + '"]', as => as.map(a => a.href));
              if (links.length === 0) {
                console.log('No se encontraron enlaces para click.');
              } else {
                const minClicks = 8;
                const maxClicks = 11;
                const clickCount = minClicks + Math.floor(Math.random() * (maxClicks - minClicks + 1));
                console.log(`Realizando ${clickCount} clicks aleatorios.`);

                for (let i = 0; i < clickCount; i++) {
                  const link = links[Math.floor(Math.random() * links.length)];
                  try {
                    await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 60000 });
                    await delay(5000 + Math.random() * 10000);
                    await page.goBack({ waitUntil: 'domcontentloaded' });
                  } catch (e) {
                    console.log('Click fallido, continuando...');
                  }
                }
              }

              await delay(5000);
              console.log('Visita completada exitosamente.');
            } catch (err) {
              console.error('Error en la visita:', err.message);
            }
            await browser.close();
          }

          (async () => {
            const instance = parseInt(process.env.INSTANCE_ID || '1');
            const allLinks = await extractLinks();

            // Para repartir carga entre 216 instancias
            const urlsToVisit = allLinks.filter((_, idx) => (idx % 216) === (instance - 1));
            const targets = urlsToVisit.length > 0 ? urlsToVisit : [allLinks[instance % allLinks.length]];

            for (const url of targets) {
              await simulateVisit(url);
            }
          })();
          EOF

          node visit.js
        env:
          INSTANCE_ID: ${{ matrix.instance }}
