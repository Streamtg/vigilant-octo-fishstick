name: Deploy TG-FileStreamBot Old-v2.0 with Ngrok

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      API_ID: ${{ secrets.API_ID }}
      API_HASH: ${{ secrets.API_HASH }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DATABASE_URI: ${{ secrets.DATABASE_URI }}
      BIN_CHANNEL: ${{ secrets.BIN_CHANNEL }}
      PORT: ${{ secrets.PORT }}
      BASE_URL: ${{ secrets.BASE_URL }}
      FQDN: ready-unlikely-osprey.ngrok-free.app
      NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    steps:
    - name: Clonar TG-FileStreamBot desde rama Old-v2.0
      run: git clone --single-branch --branch Old-v2.0 https://github.com/DeekshithSH/TG-FileStreamBot.git

    - name: Instalar Python y entorno virtual
      run: |
        sudo apt update
        sudo apt install python3 python3-pip python3-venv -y

    - name: Crear entorno virtual e instalar dependencias
      working-directory: TG-FileStreamBot
      run: |
        python3 -m venv venv
        source ./venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Instalar Ngrok
      run: |
        curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok -y

    - name: Configurar Ngrok
      run: ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Crear archivo templates.py
      working-directory: TG-FileStreamBot/WebStreamer/server
      run: |
        echo "import aiofiles" > templates.py
        echo "import mimetypes" >> templates.py
        echo "" >> templates.py
        echo "async def render_template(file_name: str, file_url: str):" >> templates.py
        echo "    mime_type, _ = mimetypes.guess_type(file_name)" >> templates.py
        echo "    mime_type = mime_type or \"\"" >> templates.py
        echo "    if mime_type.startswith('video/'):" >> templates.py
        echo "        template_path = 'WebStreamer/template/req.html'" >> templates.py
        echo "        tag = 'video'" >> templates.py
        echo "    elif mime_type.startswith('audio/'):" >> templates.py
        echo "        template_path = 'WebStreamer/template/req.html'" >> templates.py
        echo "        tag = 'audio'" >> templates.py
        echo "    else:" >> templates.py
        echo "        template_path = 'WebStreamer/template/dl.html'" >> templates.py
        echo "        tag = None" >> templates.py
        echo "    async with aiofiles.open(template_path, mode='r', encoding='utf-8') as f:" >> templates.py
        echo "        template = await f.read()" >> templates.py
        echo "    if tag:" >> templates.py
        echo "        template = template.replace('<tag src=\"%s\" class=\"player\"></tag>', f'<{tag} src=\"{file_url}\" class=\"player\" controls autoplay></{tag}>')" >> templates.py
        echo "        html = template % (file_name, file_name, file_url)" >> templates.py
        echo "    else:" >> templates.py
        echo "        size_or_type = mime_type or \"File\"" >> templates.py
        echo "        html = template % (file_name, file_name, file_url, size_or_type)" >> templates.py
        echo "    return html" >> templates.py

    - name: Crear plantillas HTML
      working-directory: TG-FileStreamBot/WebStreamer/template
      run: |
        echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>%s</title></head><body><h1>%s</h1><tag src="%s" class="player"></tag></body></html>' > req.html
        echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>%s</title></head><body><h1>%s</h1><p><a href="%s" download>Click to download (%s)</a></p></body></html>' > dl.html

    - name: Reemplazar handler /watch/{id} en routes.py solo con echo
      working-directory: TG-FileStreamBot/WebStreamer/server
      run: |
        echo "from WebStreamer.server.templates import render_template" >> routes.py
        echo "" >> routes.py
        echo "@routes.get(\"/watch/{id}\")" >> routes.py
        echo "async def watch_handler(request):" >> routes.py
        echo "    file_id = request.match_info.get(\"id\")" >> routes.py
        echo "    from WebStreamer.bot import StreamBot" >> routes.py
        echo "    from WebStreamer.vars import Var" >> routes.py
        echo "    from WebStreamer.utils.file_properties import get_file_ids" >> routes.py
        echo "    file_data = await get_file_ids(StreamBot, int(file_id))" >> routes.py
        echo "    file_name = file_data.file_name" >> routes.py
        echo "    file_url = f\"{Var.BASE_URL}/file/{file_id}\"" >> routes.py
        echo "    html = await render_template(file_name, file_url)" >> routes.py
        echo "    return web.Response(text=html, content_type=\"text/html\")" >> routes.py

    - name: Ejecutar el bot en segundo plano
      working-directory: TG-FileStreamBot
      run: |
        source ./venv/bin/activate
        export OWNER_ID=834554042
        nohup python3 -m WebStreamer > bot.log 2>&1 &

    - name: Iniciar Ngrok despuÃ©s del bot
      run: |
        sleep 10
        nohup ngrok http --domain=ready-unlikely-osprey.ngrok-free.app $PORT > ngrok.log 2>&1 &
