name: Simular visitas con referers, clics reales y user-agents variados

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # Ejecuta cada 6 horas

jobs:
  visit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [1-210] # 210 instancias paralelas

    steps:
    - name: Instalar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Instalar Puppeteer
      run: npm install puppeteer@20

    - name: Ejecutar script de visita
      env:
        INSTANCE_ID: ${{ matrix.instance }}
      run: |
        cat > visit.js << 'EOF'
        const puppeteer = require('puppeteer');

        // Listado de URLs objetivo
        const targetUrls = [
          'https://yoelmod.blogspot.com/',
          'https://yoelmod.blogspot.com/search?q=',
          'https://yoelmod.blogspot.com/p/index.html',
          'https://yoelmod.blogspot.com/2023/12/servicio-social-y-la-extension.html',
          'https://yoelmod.blogspot.com/2024/01/cuadro-de-mando-integral-modelo.html',
          'https://yoelmod.blogspot.com/2024/04/como-se-usa-la-estadistica-para.html',
          'https://yoelmod.blogspot.com/2024/01/resumen-completo-del-libro-la-meta.html'
        ];

        // Páginas referer con selector para enlaces a tu blog
        const refererPages = [
          { url: 'https://www.facebook.com/', selector: 'a[href*="yoelmod.blogspot.com"]' },
          { url: 'https://www.google.com/', selector: 'a[href*="yoelmod.blogspot.com"]' },
          { url: 'https://www.bing.com/', selector: 'a[href*="yoelmod.blogspot.com"]' },
          { url: 'https://duckduckgo.com/', selector: 'a[href*="yoelmod.blogspot.com"]' },
          { url: 'https://yoelmod.blogspot.com/', selector: 'a[href*="yoelmod.blogspot.com"]' }
        ];

        // User agents variados y sus tamaños típicos de pantalla
        const devices = [
          { name: 'Desktop Chrome', ua: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36', viewport: {width: 1366, height: 768} },
          { name: 'iPhone 14', ua: 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1', viewport: {width: 390, height: 844} },
          { name: 'Samsung Galaxy S21', ua: 'Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110 Mobile Safari/537.36', viewport: {width: 360, height: 800} },
          { name: 'iPad', ua: 'Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1', viewport: {width: 820, height: 1180} },
          { name: 'Firefox Desktop', ua: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:115.0) Gecko/20100101 Firefox/115.0', viewport: {width: 1440, height: 900} }
        ];

        async function simulateVisit(targetUrl) {
          // Elegir dispositivo aleatorio para user-agent y viewport
          const device = devices[Math.floor(Math.random() * devices.length)];

          const browser = await puppeteer.launch({ headless: 'new', args: ['--no-sandbox'] });
          const page = await browser.newPage();

          await page.setUserAgent(device.ua);
          await page.setViewport(device.viewport);

          const referer = refererPages[Math.floor(Math.random() * refererPages.length)];

          try {
            await page.goto(referer.url, { waitUntil: 'domcontentloaded', timeout: 60000 });
            await autoScroll(page);

            const links = await page.$$eval(referer.selector, els => els.map(el => el.href).filter(href => href));

            if (links.length === 0) {
              console.log(`No se encontraron enlaces al blog en el referer: ${referer.url}`);
              await page.goto(targetUrl, { waitUntil: 'domcontentloaded', timeout: 60000 });
            } else {
              const chosenLink = links[Math.floor(Math.random() * links.length)];
              await Promise.all([
                page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 60000 }),
                page.click(`a[href="${chosenLink}"]`)
              ]);
            }

            await autoScroll(page);

            // Hacer clicks internos en enlaces del blog
            const internalLinks = await page.$$eval('a[href^="https://yoelmod.blogspot.com"]', anchors => anchors.map(a => a.href));
            const clickCount = 1 + Math.floor(Math.random() * 5);
            for (let i = 0; i < clickCount && internalLinks.length > 0; i++) {
              const link = internalLinks[Math.floor(Math.random() * internalLinks.length)];
              await Promise.all([
                page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 60000 }),
                page.goto(link)
              ]);
              await autoScroll(page);
            }

            await page.waitForTimeout(5000 + Math.random() * 5000);

            console.log(`Visita completada usando dispositivo: ${device.name}`);
          } catch (e) {
            console.error('Error en la visita:', e);
          } finally {
            await browser.close();
          }
        }

        async function autoScroll(page) {
          await page.evaluate(async () => {
            await new Promise(resolve => {
              let totalHeight = 0;
              const distance = 100;
              const timer = setInterval(() => {
                window.scrollBy(0, distance);
                totalHeight += distance;
                if (totalHeight >= document.body.scrollHeight) {
                  clearInterval(timer);
                  resolve();
                }
              }, 200 + Math.random() * 300);
            });
          });
        }

        (async () => {
          const instance = parseInt(process.env.INSTANCE_ID || '1');
          const target = targetUrls[(instance - 1) % targetUrls.length];
          await simulateVisit(target);
        })();
        EOF

        node visit.js
