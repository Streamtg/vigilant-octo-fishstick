name: Go Build and Test with Ngrok Setup

on:
  schedule:
    - cron: '0 */6 * * *' # Ejecutar cada 6 horas
  workflow_dispatch: # Permitir disparar manualmente el flujo de trabajo

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        go: [1.23.4]
        flag: [A]
    timeout-minutes: 360
    env:
      API_ID: ${{ secrets.API_ID }}
      API_HASH: ${{ secrets.API_HASH }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
      PORT: ${{ secrets.PORT }}
      HOST: ${{ secrets.HOST }}
      NUM_JOBS: 900
      JOB: ${{ matrix.go }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Go
      run: |
        wget https://go.dev/dl/go${{ matrix.go }}.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf go${{ matrix.go }}.linux-amd64.tar.gz
        echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV

    - name: Verify Go installation
      run: go version

    - name: Clone and build TG-FileStreamBot
      run: |
        git clone https://github.com/EverythingSuckz/TG-FileStreamBot
        cd TG-FileStreamBot
        go build ./cmd/fsb/
        chmod +x fsb

    - name: Run TG-FileStreamBot
      run: |
        cd TG-FileStreamBot
        ./fsb run & # Ejecuta el proceso en segundo plano

    - name: Install Ngrok
      run: |
        curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
        | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
        && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
        | sudo tee /etc/apt/sources.list.d/ngrok.list \
        && sudo apt update \
        && sudo apt install ngrok

    - name: Configure Ngrok
      run: |
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Start Ngrok HTTP with custom URL
      run: |
        ngrok http --url=ready-unlikely-osprey.ngrok-free.app 8080




# Workflow combinado: Deploy Jekyll y Go Build con Ngrok
name: Deploy Jekyll and Go Build with Ngrok Setup

on:
  # ConfiguraciÃ³n de eventos para ambos workflows
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # Ejecutar cada 6 horas

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job para construir y desplegar Jekyll
  build_jekyll:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy_jekyll:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_jekyll
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job para construir y ejecutar el bot Go con Ngrok
  build_and_run_bot:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        go: [1.23.4]
        flag: [A]
    timeout-minutes: 360
    env:
      API_ID: ${{ secrets.API_ID }}
      API_HASH: ${{ secrets.API_HASH }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
      PORT: ${{ secrets.PORT }}
      HOST: ${{ secrets.HOST }}
      NUM_JOBS: 900
      JOB: ${{ matrix.go }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Go
        run: |
          wget https://go.dev/dl/go${{ matrix.go }}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go${{ matrix.go }}.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV

      - name: Verify Go installation
        run: go version

      - name: Clone and build TG-FileStreamBot
        run: |
          git clone https://github.com/EverythingSuckz/TG-FileStreamBot
          cd TG-FileStreamBot
          go build ./cmd/fsb/
          chmod +x fsb

      - name: Run TG-FileStreamBot
        run: |
          cd TG-FileStreamBot
          ./fsb run & # Ejecuta el proceso en segundo plano

      - name: Install Ngrok
        run: |
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
          | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
          && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
          | sudo tee /etc/apt/sources.list.d/ngrok.list \
          && sudo apt update \
          && sudo apt install ngrok

      - name: Configure Ngrok
        run: |
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Start Ngrok HTTP with custom URL
        run: |
          ngrok http --url=ready-unlikely-osprey.ngrok-free.app 8080

      - name: Keep Workflow Alive for 6 Hours
        run: |
          echo "Keeping the workflow alive for 6 hours"
          sleep $((6 * 60 * 60)) # Mantiene vivo durante 6 horas
