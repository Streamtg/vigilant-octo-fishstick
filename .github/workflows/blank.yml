name: Visit Yoelmod Blog Random (216 Jobs)

on:
  schedule:
    - cron: '0 */4 * * *'  # cada 4 horas
  workflow_dispatch:

jobs:
  visit_blog:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
                 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
                 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
                 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
                 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
                 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
                 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
                 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
                 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
                 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
                 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
                 211, 212, 213, 214, 215, 216]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Puppeteer
        run: npm install puppeteer

      - name: Create and Run Visit Script
        run: |
          echo "Iniciando visita aleatoria para job ID ${{ matrix.job_id }}..."
          cat << 'EOF' > visit.js
          const puppeteer = require("puppeteer");

          async function delay(ms) {
            return new Promise(res => setTimeout(res, ms));
          }

          async function scrollPage(page) {
            const scrollDelay = 1000;
            const scrollSteps = Math.floor(Math.random() * 6) + 5; // entre 5 y 10 scrolls
            for (let i = 0; i < scrollSteps; i++) {
              await page.evaluate(() => window.scrollBy(0, window.innerHeight));
              await delay(scrollDelay);
            }
          }

          async function randomClicks(page) {
            const minClicks = 8;
            const maxClicks = 11;
            const totalClicks = Math.floor(Math.random() * (maxClicks - minClicks + 1)) + minClicks;

            const clickable = await page.$$('a, button, input[type="button"], input[type="submit"]');
            for (let i = 0; i < totalClicks; i++) {
              const randomIndex = Math.floor(Math.random() * clickable.length);
              try {
                await clickable[randomIndex].click({ delay: Math.random() * 200 + 100 });
                await delay(1000 + Math.random() * 2000);
              } catch (e) {
                console.log("Click fallido, continuando...");
              }
            }
          }

          async function runVisit() {
            const indexUrl = "https://yoelmod.blogspot.com/";
            const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
            const page = await browser.newPage();
            try {
              await page.goto(indexUrl, { waitUntil: "domcontentloaded", timeout: 60000 });

              // Extraer enlaces internos
              const links = await page.$$eval("a", as =>
                as.map(a => a.href).filter(h => h.includes("yoelmod.blogspot.com") && !h.includes("mailto") && !h.includes("javascript"))
              );
              const uniqueLinks = [...new Set(links)];
              if (uniqueLinks.length === 0) {
                console.log("No se encontraron enlaces.");
                await browser.close();
                return;
              }

              // Elegir enlace aleatorio y visitar
              const randomLink = uniqueLinks[Math.floor(Math.random() * uniqueLinks.length)];
              console.log("Visitando:", randomLink);
              await page.goto(randomLink, { waitUntil: "domcontentloaded", timeout: 60000 });

              await scrollPage(page);
              await randomClicks(page);

              console.log("Visita completada exitosamente.");
            } catch (err) {
              console.error("Error en la visita:", err.message);
            } finally {
              await browser.close();
            }
          }

          runVisit();
          EOF
          node visit.js
